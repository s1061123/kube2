terraform {
  required_providers {
    libvirt = {
      source = "dmacvicar/libvirt"
    }
  }
}

provider "libvirt" {
  uri = "qemu:///system"
}

{% if vm_deploy_type is defined and vm_deploy_type != "vm_simple" %}
// if 2nic is defined
resource "libvirt_network" "{{ vm_name_prefix | default("") }}multus_eth1" {
  name = "{{ vm_name_prefix | default("") }}multus_eth1"

  # mode can be: "nat" (default), "none", "route", "bridge"
  mode = "none"
  addresses = ["{{ vm_network_cidr }}"]
  autostart = true
}
{% endif %}
{% for node in virtual_machines %}

{% set vm_name = (vm_name_prefix | default("")) +  node['name'] %}
module "{{ vm_name }}" {
  // fallthrough (1nic)
  source   = "./modules/{{ vm_deploy_type | default("vm_simple") }}"
  name = "{{ vm_name }}"
{% if node['cpus'] is defined %}
  vcpu = {{ node['cpus'] }}
{% else %}
  vcpu = {{ default_cpus }}
{% endif %}
{% if node['memory'] is defined %}
  memory = {{ node['memory'] }}
{% else %}
  memory = {{ default_ram_mb }}
{% endif %}
{% if vm_deploy_type == "vm_2nics_rawdisk" %}
  block_device = "{{ node['block_device'] }}"
{% else %}
  base_image = "images/{{ vm_image_url | basename }}"
{% endif %}
  user = "{{ vm_image_user }}"
  ssh_pub_key = file("{{ ssh_pub_key }}")
{% if 'eth1_ip' in node and vm_deploy_type != "vm_3nics_bond_ceph" %}
  eth1_addr = [ "{{ node['eth1_ip'] }}" ]
{% endif %}
  network_name = "{{ vm_name_prefix | default("") }}multus_eth1"

}

output "{{ vm_name }}" {
  value = flatten(module.{{ vm_name }}.ips)
}
{% endfor %}
